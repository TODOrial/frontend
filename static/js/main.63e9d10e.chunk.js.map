{"version":3,"sources":["services/api.ts","components/TaskCard/index.tsx","screens/HomeScreen.tsx","screens/EditScreen.tsx","screens/CreateScreen.tsx","App.tsx","index.tsx"],"names":["REACT_ENV","process","api","axios","create","baseURL","development","production","TaskCard","taskData","_id","title","description","createdAt","DateTime","local","setLocale","updatedAtDate","fromISO","className","to","toFormat","HomeScreen","useState","tasks","setTasks","useEffect","get","then","response","data","results","map","task","index","key","EditScreen","id","useParams","history","useHistory","editTask","setEditTask","setTitle","setDescription","catch","error","push","oldValue","updatedAt","type","value","onChange","e","target","onClick","event","preventDefault","updatedTask","patch","delete","CreateScreen","post","console","log","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63e9d10e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst REACT_ENV: string = process.env.REACT_ENV || \"production\";\r\n\r\nconst baseURLs: { [key: string]: string } = {\r\n    development: \"http://localhost:5000\",\r\n    production: \"https://todorial.herokuapp.com\",\r\n};\r\n\r\nconst api = axios.create({ baseURL: baseURLs[REACT_ENV] });\r\n\r\nexport default api;\r\n","import React from \"react\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport TaskType from \"../../types/TaskType\";\r\n\r\nfunction TaskCard({ taskData }: { taskData: TaskType }) {\r\n    const { _id, title, description, createdAt } = taskData;\r\n\r\n    DateTime.local().setLocale(\"pt-br\");\r\n\r\n    const updatedAtDate = DateTime.fromISO(createdAt);\r\n\r\n    return (\r\n        <Link className=\"task-card\" to={`/${_id}/edit`}>\r\n            {/* <p>{_id}</p> */}\r\n            <h4 className=\"task-title\">{title}</h4>\r\n            <div className=\"row space-between word-break-all\">\r\n                <p className=\"task-description\">{description}</p>\r\n                <p className=\"task-updated-at-date\">{updatedAtDate.toFormat(\"ff\")}</p>\r\n            </div>\r\n            {/* <p>{updatedAt}</p> */}\r\n        </Link>\r\n    );\r\n}\r\n\r\nexport default TaskCard;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport api from \"../services/api\";\r\nimport TaskType from \"../types/TaskType\";\r\n\r\nimport TaskCard from \"../components/TaskCard\";\r\n\r\nfunction HomeScreen() {\r\n    const [tasks, setTasks] = useState<TaskType[]>();\r\n\r\n    useEffect(() => {\r\n        api.get(\"/tasks\").then((response) => {\r\n            const tasks = response?.data?.results as TaskType[];\r\n            setTasks(tasks);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"screen-route home-screen\">\r\n            {tasks && (\r\n                <ul className=\"todo-list\">\r\n                    {tasks.map((task, index) => (\r\n                        <TaskCard taskData={task} key={index} />\r\n                    ))}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomeScreen;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport TaskCard from \"../components/TaskCard\";\r\n\r\nimport api from \"../services/api\";\r\nimport TaskType from \"../types/TaskType\";\r\n\r\nfunction EditScreen() {\r\n    let { id } = useParams<{ id: string }>();\r\n    const history = useHistory();\r\n\r\n    const [editTask, setEditTask] = useState<TaskType>();\r\n\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    const [description, setDescription] = useState<string>(\"\");\r\n\r\n    useEffect(() => {\r\n        api.get(`/tasks/${id}`)\r\n            .then((response) => {\r\n                const task = response.data as TaskType;\r\n\r\n                setEditTask(task);\r\n\r\n                setTitle(task.title);\r\n                setDescription(task?.description || \"\");\r\n            })\r\n            .catch((error) => {\r\n                history.push(\"/\");\r\n            });\r\n    }, [id, history]);\r\n\r\n    useEffect(() => {\r\n        setEditTask((oldValue) => {\r\n            const tempTask = {\r\n                _id: oldValue?._id,\r\n                title: title,\r\n                description: description,\r\n                createdAt: oldValue?.createdAt,\r\n                updatedAt: oldValue?.updatedAt,\r\n            } as TaskType;\r\n            return tempTask;\r\n        });\r\n    }, [title, description]);\r\n\r\n    function handleSubmit(event: React.MouseEvent<HTMLInputElement, MouseEvent>) {\r\n        event.preventDefault();\r\n\r\n        const updatedTask = {\r\n            title,\r\n            description,\r\n        };\r\n\r\n        api.patch(`/tasks/${editTask?._id}/edit`, updatedTask).then(() => {\r\n            history.push(\"/\");\r\n        });\r\n    }\r\n\r\n    function handleDelete(event: React.MouseEvent<HTMLInputElement, MouseEvent>) {\r\n        event.preventDefault();\r\n\r\n        api.delete(`/tasks/${editTask?._id}/delete`).then(() => {\r\n            history.push(\"/\");\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"screen-route edit-screen\">\r\n            {editTask && <TaskCard taskData={editTask} />}\r\n            <form className=\"col\">\r\n                <label className=\"col\">\r\n                    Título\r\n                    <input className=\"input-text\" type=\"text\" value={title} onChange={(e) => setTitle(e.target.value)} />\r\n                </label>\r\n                <label className=\"col\">\r\n                    Descrição\r\n                    <input className=\"input-text\" type=\"text\" value={description} onChange={(e) => setDescription(e.target.value)} />\r\n                </label>\r\n                <input className=\"create-task-button\" type=\"submit\" value=\"Salvar\" onClick={handleSubmit} />\r\n                <input className=\"delete-task-button\" type=\"submit\" value=\"Excluir\" onClick={handleDelete} />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditScreen;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport api from \"../services/api\";\r\n\r\nfunction CreateScreen() {\r\n    const [title, setTitle] = useState<string>();\r\n    const [description, setDescription] = useState<string>();\r\n\r\n    const history = useHistory();\r\n\r\n    function handleSubmit(event: React.MouseEvent<HTMLInputElement, MouseEvent>) {\r\n        event.preventDefault();\r\n\r\n        api.post(\"/tasks/create\", {\r\n            title,\r\n            description,\r\n        }).then(() => {\r\n            history.push(\"/\");\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"screen-route create-screen\">\r\n            <form className=\"col\">\r\n                <label className=\"col\">\r\n                    Título\r\n                    <input className=\"input-text\" type=\"text\" value={title} onChange={(e) => setTitle(e.target.value)} />\r\n                </label>\r\n                <label className=\"col\">\r\n                    Descrição\r\n                    <input className=\"input-text\" type=\"text\" value={description} onChange={(e) => setDescription(e.target.value)} />\r\n                </label>\r\n                <input className=\"create-task-button\" type=\"submit\" value=\"Criar\" onClick={handleSubmit} />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateScreen;\r\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport { HomeScreen, EditScreen, CreateScreen } from \"./screens\";\n\nconst REACT_ENV: string = process.env.REACT_ENV || \"production\";\n\nconsole.log(REACT_ENV);\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                {REACT_ENV !== \"production\" && <span>dev-mode</span>}\n                <h1 className=\"app-title\">TODOrial</h1>\n\n                <div className=\"navbar\">\n                    <Link to=\"/\">Home</Link>\n                    <Link to=\"/create\">Criar</Link>\n                </div>\n                <Switch>\n                    <Route path=\"/create\">\n                        <CreateScreen />\n                    </Route>\n                    <Route path=\"/:id/edit\">\n                        <EditScreen />\n                    </Route>\n                    <Route path=\"/\">\n                        <HomeScreen />\n                    </Route>\n                </Switch>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}